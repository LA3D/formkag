[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "{{repo}}",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "{{repo}}"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "{{repo}}",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall {{lib_path}} in Development mode\n# make sure {{lib_path}} package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to {{lib_path}}\n$ nbdev_prepare",
    "crumbs": [
      "{{repo}}"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "{{repo}}",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/{{user}}/{{lib_name}}.git\nor from conda\n$ conda install -c {{user}} {{lib_path}}\nor from pypi\n$ pip install {{lib_path}}\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.\n\n\nUV instructions\n# Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Create and activate a virtual environment\nuv venv\nsource .venv/bin/activate\n\n# Install the project in editable mode\nuv pip install -e \".[dev]\"\n\n# Install additional dependencies\nuv pip install nbdev jupyter",
    "crumbs": [
      "{{repo}}"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "{{repo}}",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "{{repo}}"
    ]
  },
  {
    "objectID": "document_extraction.html",
    "href": "document_extraction.html",
    "title": "document_extraction",
    "section": "",
    "text": "from IPython.display import Markdown, Image, display",
    "crumbs": [
      "document_extraction"
    ]
  },
  {
    "objectID": "document_extraction.html#data-container-definitions",
    "href": "document_extraction.html#data-container-definitions",
    "title": "document_extraction",
    "section": "Data container definitions",
    "text": "Data container definitions\n\nsource\n\nRegion\n\n Region (id:str, name:str, type:str, order:int, position:str,\n         bounds:str='', next_regions:List[str]=&lt;factory&gt;,\n         contains:List[str]=&lt;factory&gt;)\n\nA region represents a distinct area in a document with specific content and purpose\n\nsource\n\n\nSpatialRel\n\n SpatialRel (from_region:str, to_region:str, relationship:str)\n\nDescribes how regions are spatially related to each other in the document\n\nsource\n\n\nDocLayout\n\n DocLayout (document_type:str, regions:List[__main__.Region],\n            reading_flow:List[str]=&lt;factory&gt;,\n            spatial_relationships:List[__main__.SpatialRel]=&lt;factory&gt;)\n\nComplete document layout structure including regions and their relationships\n\nsource\n\n\nRegionContent\n\n RegionContent (content:str, concepts:List[Dict[str,str]],\n                document_purpose:str, relationships:List[Dict[str,str]])\n\nStructured content extracted from a document region including semantic information\n\ncache = load_cache_imgs('data/')\n\n\nsource\n\n\nparse_json\n\n parse_json (s:str)\n\nParse JSON from raw LLM response, handling markdown code blocks",
    "crumbs": [
      "document_extraction"
    ]
  },
  {
    "objectID": "document_extraction.html#spatial-semantics-and-region-extraction",
    "href": "document_extraction.html#spatial-semantics-and-region-extraction",
    "title": "document_extraction",
    "section": "Spatial Semantics and Region Extraction",
    "text": "Spatial Semantics and Region Extraction\nIn the first step of our prompt chain, we wan to extract the region semantics\n\nLAYOUT_PROMPT = \"\"\"Analyze this document's layout structure following these specific steps.\n\n&lt;instructions&gt;\n1. First analyze the visual structure and spatial relationships\n2. Then identify the logical reading order\n3. Finally return a JSON structure describing the complete layout\n&lt;/instructions&gt;\n\n&lt;example&gt;\n{\n    \"document_type\": \"form\",\n    \"layout\": {\n        \"regions\": [\n            {\n                \"id\": \"r1\",\n                \"name\": \"header\",\n                \"type\": \"header\",\n                \"order\": 1,\n                \"position\": \"top of page\"\n            }\n        ],\n        \"reading_flow\": [\"r1\", \"r2\"],\n        \"spatial_relationships\": [\n            {\n                \"from_region\": \"r1\",\n                \"to_region\": \"r2\",\n                \"relationship\": \"above\"\n            }\n        ]\n    }\n}\n&lt;/example&gt;\n\nReturn ONLY the JSON structure with no additional text.\"\"\"\n\n\n\nget_chat\n\n get_chat (model:Optional[str]=None)\n\nGet chat instance using Cosette model infrastructure\n\n\n\nanalyze_layout\n\n analyze_layout (img:bytes, chat:Optional[cosette.core.Chat]=None)\n\nAnalyze document layout using multimodal LLM\n\n\n\nextract_region_content\n\n extract_region_content (img:bytes, region:__main__.Region,\n                         chat:Optional[cosette.core.Chat]=None)\n\nExtract content and semantic information from a specific region\n\n# Let's test both\nlayout = test_layout_analysis()\nif layout: test_region_extraction(layout)\n\nAnalyzing layout for 82092117.png...\n\nDocument Type: fax_cover_sheet\n\nRegions:\n\nheader (type: header)\n  Position: top center\n\nfax_information (type: information)\n  Position: below header\n\nrecipient_information (type: recipient_info)\n  Position: below fax information\n\nsender_information (type: sender_info)\n  Position: below recipient information\n\nspecial_instructions (type: instructions)\n  Position: below sender information\n\nnote (type: note)\n  Position: bottom of page\n\nfooter (type: footer)\n  Position: bottom center\n\nSpatial Relationships:\n• r1 above r2\n• r2 above r3\n• r3 above r4\n• r4 above r5\n• r5 above r6\n• r6 above r7\n\nExtracting content from header...\nContent:\nAttorney General Betty D. Montgomery\n\nConcepts:\n- role: Attorney General\n- identity: Betty D. Montgomery\n\nPurpose: Identifies the sender's office and authority responsible for the fax transmission.\n\nRelationships:\n- sender identity → confidential facsimile transmission cover sheet: Specifies the official sender of the document.\n\n\n\n\n\nanalyze_document\n\n analyze_document (img_name:str, chat:Optional[cosette.core.Chat]=None)\n\nComplete document analysis workflow using prompt chaining\n\n# Run test\ntest_document_workflow()\n\nTesting complete workflow on 82092117.png\n==================================================\n\n\n\n\n\n\n\n\n\nStep 1: Analyzing layout structure...\n\nStep 2: Extracting content from regions...\n\nProcessing region 1: header\n\nProcessing region 2: recipient_info\n\nProcessing region 3: sender_info\n\nProcessing region 4: special_instructions\n\nProcessing region 5: important_notice\n\n\n{'document_type': 'fax cover sheet',\n 'layout': DocLayout(document_type='fax cover sheet', regions=[\n header (type: header)\n   Position: top of page, \n recipient_info (type: section)\n   Position: below header, \n sender_info (type: section)\n   Position: below recipient_info, \n special_instructions (type: section)\n   Position: below sender_info, \n important_notice (type: notice)\n   Position: bottom of page], reading_flow=['r1', 'r2', 'r3', 'r4', 'r5'], spatial_relationships=[r1 above r2, r2 above r3, r3 above r4, r4 above r5]),\n 'contents': [Content:\n  Attorney General Betty D. Montgomery\n  \n  Concepts:\n  - role: Attorney General\n  - identity: Betty D. Montgomery\n  \n  Purpose: Identifies the sender's office and authority\n  \n  Relationships:\n  - association → content of the fax: indicates the sender responsible for the transmission,\n  Content:\n  TO: George Baroody\n  FAX NUMBER: (336) 335-7392\n  PHONE NUMBER: (336) 335-7363\n  \n  Concepts:\n  - identity: George Baroody\n  - contact: Fax Number: (336) 335-7392\n  - contact: Phone Number: (336) 335-7363\n  \n  Purpose: Specifies the recipient's contact information for the fax transmission\n  \n  Relationships:\n  - association → sender_info: indicates who the fax is intended for and how to contact them,\n  Content:\n  DATE: 12/10/98\n  NUMBER OF PAGES INCLUDING COVER SHEET: 3\n  SENDER/PHONE NUMBER: June Flynn for Eric Brown/(614) 466-8980\n  \n  Concepts:\n  - date: 12/10/98\n  - quantity: Number of Pages: 3\n  - identity: June Flynn for Eric Brown\n  - contact: Phone Number: (614) 466-8980\n  \n  Purpose: Provides the sender's contact information and details about the fax transmission\n  \n  Relationships:\n  - association → recipient_info: offers sender details to complement recipient information,\n  Content:\n  SPECIAL INSTRUCTIONS:\n  \n  IF YOU DO NOT RECEIVE ANY OF THE PAGES PROPERLY, PLEASE CONTACT SENDER AS SOON AS POSSIBLE\n  \n  Concepts:\n  - instruction: Contact sender if pages are not received properly\n  \n  Purpose: Provides guidance for the recipient in case of transmission issues\n  \n  Relationships:\n  - dependency → sender_info: instructs recipient to use sender contact information if issues arise,\n  Content:\n  NOTE: THIS MESSAGE IS INTENDED ONLY FOR THE USE OF THE INDIVIDUAL OR ENTITY TO WHOM IT IS ADDRESSED AND MAY CONTAIN INFORMATION THAT IS PRIVILEGED, CONFIDENTIAL, AND EXEMPT FROM DISCLOSURE UNDER APPLICABLE LAW. If the reader of this message is not the intended recipient or the employee or agent responsible for delivering the message to the intended recipient, you are hereby notified that any dissemination, distribution, copying, or conveying of this communication in any manner is strictly prohibited. If you have received this communication in error, please notify us immediately by telephone and return the original message to us at the address below via the U.S. Postal Service. Thank you for your cooperation.\n  \n  Concepts:\n  - legal_notice: Confidential and privileged communication warning\n  \n  Purpose: Warns and instructs unintended recipients about the legal obligations and actions to take if they receive the fax in error\n  \n  Relationships:\n  - association → recipient_info: clarifies the intended recipient and required actions if misdelivered]}",
    "crumbs": [
      "document_extraction"
    ]
  },
  {
    "objectID": "solveit_notes.html",
    "href": "solveit_notes.html",
    "title": "formkag",
    "section": "",
    "text": "# Create chat and get response\nimgchat = Chat(model)\nresponse = imgchat([img, prompt])\n\n# Parse the XML response\ntry:\n    # The response needs to be accessed as a string first\n    # Let's print the raw response to see what we're getting\n    print(\"Raw response:\")\n    print(response)\n    \n    # Then we can try to extract the XML\n    # We might need to use BeautifulSoup to find the XML content within the response\n    soup = bs(str(response), 'xml')\n    doc = Document(str(soup.find('document')))\n    \n    # Now we can access structured data\n    metadata = doc.find('metadata')\n    structure = doc.find('structure')\n    print(\"\\nParsed data:\")\n    print(f\"Document type: {metadata.find('type').text if metadata else 'Not found'}\")\nexcept Exception as e:\n    print(f\"Error parsing response: {e}\")\n\nYes! The tools-lm package’s XML support will be perfect for this. Let’s modify our approach to use the XML structure more effectively and make the results easily parseable:\nfrom toolslm.xml import *\n\n# Define our structured prompt with XML tags that match the toolslm expectations\nprompt = \"\"\"&lt;task&gt;\nAnalyze this document image and extract its structure and content.\n&lt;/task&gt;\n\n&lt;instructions&gt;\nAct as an expert document structure analyst. Extract and structure the document information hierarchically.\n&lt;/instructions&gt;\n\n&lt;output_format&gt;\n&lt;document&gt;\n    &lt;metadata&gt;\n        &lt;type&gt;&lt;/type&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;form_id&gt;&lt;/form_id&gt;\n        &lt;date&gt;&lt;/date&gt;\n    &lt;/metadata&gt;\n    &lt;structure&gt;\n        &lt;header&gt;\n            &lt;fields&gt;&lt;/fields&gt;\n        &lt;/header&gt;\n        &lt;body&gt;\n            &lt;sections&gt;&lt;/sections&gt;\n        &lt;/body&gt;\n        &lt;footer&gt;\n            &lt;fields&gt;&lt;/fields&gt;\n        &lt;/footer&gt;\n    &lt;/structure&gt;\n&lt;/document&gt;\n&lt;/output_format&gt;\n\n&lt;thinking&gt;\n1. Identify document type and metadata\n2. Analyze visual layout and sections\n3. Extract form fields and relationships\n4. Structure hierarchically in XML format\n&lt;/thinking&gt;\n\nPlease provide your analysis in valid XML format using the structure above.\"\"\"\n\n# Create chat and get response\nimgchat = Chat(model)\nresponse = imgchat([img, prompt])\n\n# Parse the XML response\ntry:\n    # Extract XML content from response (assuming it's in the response text)\n    xml_content = response.content\n    # Parse using toolslm's XML support\n    doc = Document(xml_content)\n    # Now we can access structured data\n    metadata = doc.find('metadata')\n    structure = doc.find('structure')\n    print(f\"Document type: {metadata.find('type').text}\")\nexcept Exception as e:\n    print(f\"Error parsing response: {e}\")\nThis approach has several advantages: 1. Uses native XML support from toolslm 2. Makes the response easily parseable 3. Maintains structure that aligns with KAG’s knowledge representation 4. Provides clear validation of the output format\nWould you like me to run this and we can then refine based on the results?\nAh, now I understand! We want to extract the document’s structural semantics - like “this is a form with a header containing identifying fields, a body with expenditure entries, and a footer with notes” - rather than the specific data within those fields. Let’s modify our prompt to focus on the document’s semantic structure:\nprompt = \"\"\"&lt;task&gt;\nAnalyze this document's form structure and semantic organization, focusing on the types of fields and their relationships rather than their contents.\n&lt;/task&gt;\n\n&lt;instructions&gt;\nAct as a document structure analyst. Identify:\n1. The semantic organization of the form\n2. Types of fields and their purposes\n3. Logical groupings and hierarchies\n4. Relationships between different sections\n&lt;/instructions&gt;\n\n&lt;output_format&gt;\n&lt;document_schema&gt;\n    &lt;form_type&gt;\n        &lt;purpose&gt;&lt;/purpose&gt;\n        &lt;primary_entities&gt;&lt;/primary_entities&gt;\n    &lt;/form_type&gt;\n    &lt;layout_structure&gt;\n        &lt;header&gt;\n            &lt;field_types&gt;&lt;/field_types&gt;\n            &lt;semantic_purpose&gt;&lt;/semantic_purpose&gt;\n        &lt;/header&gt;\n        &lt;body&gt;\n            &lt;section_types&gt;&lt;/section_types&gt;\n            &lt;field_groups&gt;&lt;/field_groups&gt;\n            &lt;repeating_structures&gt;&lt;/repeating_structures&gt;\n        &lt;/body&gt;\n        &lt;footer&gt;\n            &lt;field_types&gt;&lt;/field_types&gt;\n            &lt;semantic_purpose&gt;&lt;/semantic_purpose&gt;\n        &lt;/footer&gt;\n    &lt;/layout_structure&gt;\n    &lt;relationships&gt;\n        &lt;field_dependencies&gt;&lt;/field_dependencies&gt;\n        &lt;calculation_flows&gt;&lt;/calculation_flows&gt;\n        &lt;validation_rules&gt;&lt;/validation_rules&gt;\n    &lt;/relationships&gt;\n&lt;/document_schema&gt;\n&lt;/output_format&gt;\n\n&lt;thinking&gt;\n1. First, identify the form's overall purpose and structure\n2. Analyze field types and their semantic roles\n3. Identify repeating patterns and data structures\n4. Map relationships and dependencies between sections\n&lt;/thinking&gt;\n\nPlease analyze the document's structure and provide the schema in XML format.\"\"\"\n\n# Create chat and get response\nimgchat = Chat(model)\nresponse = imgchat([img, prompt])\nprint(response)\nThis revised prompt should: 1. Focus on structural patterns rather than content 2. Identify field types and their purposes 3. Map relationships between different parts of the form 4. Create a schema that could be applied to similar forms\nWould you like me to run this updated version?"
  }
]